
@Misc{Zitat02,
  title        = {\textsc{Ultimate}},
  howpublished = {\url{https://ultimate.informatik.uni-freiburg.de}},
  note         = {Accessed: 2022-02-28},
}

@Misc{svcomp,
  title        = {\texttt{sv-comp} benchmarks},
  howpublished = {\url{https://github.com/sosy-lab/sv-benchmarks}},
  note         = {Accessed: 2022-01-10},
}

@inproceedings{DBLP:conf/rp/HaaseH14,
  author    = {Christoph Haase and
               Simon Halfon},
  editor    = {Jo{\"{e}}l Ouaknine and
               Igor Potapov and
               James Worrell},
  title     = {Integer Vector Addition Systems with States},
  booktitle = {Reachability Problems - 8th International Workshop, {RP} 2014, Oxford,
               UK, September 22-24, 2014. Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {8762},
  pages     = {112--124},
  publisher = {Springer},
  year      = {2014},
  url       = {https://doi.org/10.1007/978-3-319-11439-2\_9},
  doi       = {10.1007/978-3-319-11439-2\_9},
  timestamp = {Tue, 14 May 2019 10:00:51 +0200},
  biburl    = {https://dblp.org/rec/conf/rp/HaaseH14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/fmsd/KroeningLW15,
  author    = {Daniel Kroening and
               Matt Lewis and
               Georg Weissenbacher},
  title     = {Under-approximating Loops in {C} Programs for Fast Counterexample
               Detection},
  journal   = {Formal Methods Syst. Des.},
  volume    = {47},
  number    = {1},
  pages     = {75--92},
  year      = {2015},
  url       = {https://doi.org/10.1007/s10703-015-0228-1},
  doi       = {10.1007/s10703-015-0228-1},
  timestamp = {Fri, 13 Mar 2020 10:55:12 +0100},
  biburl    = {https://dblp.org/rec/journals/fmsd/KroeningLW15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/fmsd/KroeningSTTW13,
  author    = {Daniel Kroening and
               Natasha Sharygina and
               Stefano Tonetta and
               Aliaksei Tsitovich and
               Christoph M. Wintersteiger},
  title     = {Loop Summarization using State and Transition Invariants},
  journal   = {Formal Methods Syst. Des.},
  volume    = {42},
  number    = {3},
  pages     = {221--261},
  year      = {2013},
  url       = {https://doi.org/10.1007/s10703-012-0176-y},
  doi       = {10.1007/s10703-012-0176-y},
  timestamp = {Fri, 13 Mar 2020 10:55:17 +0100},
  biburl    = {https://dblp.org/rec/journals/fmsd/KroeningSTTW13.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cav/SilvermanK19,
  author    = {Jake Silverman and
               Zachary Kincaid},
  editor    = {Isil Dillig and
               Serdar Tasiran},
  title     = {Loop Summarization with Rational Vector Addition Systems},
  booktitle = {Computer Aided Verification - 31st International Conference, {CAV}
               2019, New York City, NY, USA, July 15-18, 2019, Proceedings, Part
               {II}},
  series    = {Lecture Notes in Computer Science},
  volume    = {11562},
  pages     = {97--115},
  publisher = {Springer},
  year      = {2019},
  url       = {https://doi.org/10.1007/978-3-030-25543-5\_7},
  doi       = {10.1007/978-3-030-25543-5\_7},
  timestamp = {Fri, 31 Jan 2020 21:32:18 +0100},
  biburl    = {https://dblp.org/rec/conf/cav/SilvermanK19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/tse/XieCZLLL19,
  author    = {Xiaofei Xie and
               Bihuan Chen and
               Liang Zou and
               Yang Liu and
               Wei Le and
               Xiaohong Li},
  title     = {Automatic Loop Summarization via Path Dependency Analysis},
  journal   = {{IEEE} Trans. Software Eng.},
  volume    = {45},
  number    = {6},
  pages     = {537--557},
  year      = {2019},
  url       = {https://doi.org/10.1109/TSE.2017.2788018},
  doi       = {10.1109/TSE.2017.2788018},
  timestamp = {Tue, 17 Mar 2020 15:40:44 +0100},
  biburl    = {https://dblp.org/rec/journals/tse/XieCZLLL19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


% Encoding: UTF-8


@InProceedings{10.1007/978-3-642-33386-6_16,
author="Hojjat, Hossein
and Iosif, Radu
and Kone{\v{c}}n{\'y}, Filip
and Kuncak, Viktor
and R{\"u}mmer, Philipp",
editor="Chakraborty, Supratik
and Mukund, Madhavan",
title="Accelerating Interpolants",
booktitle="Automated Technology for Verification and Analysis",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="187--202",
abstract="We present Counterexample-Guided Accelerated Abstraction Refinement (CEGAAR), a new algorithm for verifying infinite-state transition systems. CEGAAR combines interpolation-based predicate discovery in counterexample-guided predicate abstraction with acceleration technique for computing the transitive closure of loops. CEGAAR applies acceleration to dynamically discovered looping patterns in the unfolding of the transition system, and combines overapproximation with underapproximation. It constructs inductive invariants that rule out an infinite family of spurious counterexamples, alleviating the problem of divergence in predicate abstraction without losing its adaptive nature. We present theoretical and experimental justification for the effectiveness of CEGAAR, showing that inductive interpolants can be computed from classical Craig interpolants and transitive closures of loops. We present an implementation of CEGAAR that verifies integer transition systems. We show that the resulting implementation robustly handles a number of difficult transition systems that cannot be handled using interpolation-based predicate abstraction or acceleration alone.",
isbn="978-3-642-33386-6"
}

@article{10.1145/363235.363259,
author = {Hoare, C. A. R.},
title = {An Axiomatic Basis for Computer Programming},
year = {1969},
issue_date = {Oct. 1969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/363235.363259},
doi = {10.1145/363235.363259},
abstract = {In this paper an attempt is made to explore the logical foundations of computer programming by use of techniques which were first applied in the study of geometry and have later been extended to other branches of mathematics. This involves the elucidation of sets of axioms and rules of inference which can be used in proofs of the properties of computer programs. Examples are given of such axioms and rules, and a formal proof of a simple theorem is displayed. Finally, it is argued that important advantage, both theoretical and practical, may follow from a pursuance of these topics.},
journal = {Commun. ACM},
month = oct,
pages = {576â€“580},
numpages = {5},
keywords = {axiomatic method, machine-independent programming, formal language definition, theory of programming' proofs of programs, programming language design, program documentation}
}

@article{DBLP:journals/corr/abs-cs-0703084,
  author    = {Antoine Min{\'{e}}},
  title     = {The Octagon Abstract Domain},
  journal   = {CoRR},
  volume    = {abs/cs/0703084},
  year      = {2007},
  url       = {http://arxiv.org/abs/cs/0703084},
  archivePrefix = {arXiv},
  eprint    = {cs/0703084},
  timestamp = {Mon, 13 Aug 2018 16:47:22 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-cs-0703084.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-39799-8_2,
author="Heizmann, Matthias
and Hoenicke, Jochen
and Podelski, Andreas",
editor="Sharygina, Natasha
and Veith, Helmut",
title="Software Model Checking for People Who Love Automata",
booktitle="Computer Aided Verification",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="36--52",
abstract="In this expository paper, we use automata for software model checking in a new way. The starting point is to fix the alphabet: the set of statements of the given program. We show how automata over the alphabet of statements can help to decompose the main problem in software model checking, which is to find the right abstraction of a program for a given correctness property.",
isbn="978-3-642-39799-8"
}

@InProceedings{10.1007/978-3-642-03237-0_7,
author="Heizmann, Matthias
and Hoenicke, Jochen
and Podelski, Andreas",
editor="Palsberg, Jens
and Su, Zhendong",
title="Refinement of Trace Abstraction",
booktitle="Static Analysis",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="69--85",
abstract="We present a new counterexample-guided abstraction refinement scheme. The scheme refines an over-approximation of the set of possible traces. Each refinement step introduces a finite automaton that recognizes a set of infeasible traces. A central idea enabling our approach is to use interpolants (assertions generated, e.g., by the infeasibility proof for an error trace) in order to automatically construct such an automaton. A data base of interpolant automata has an interesting potential for reuse of theorem proving work (from one program to another).",
isbn="978-3-642-03237-0"
}

@Inbook{Almeida2011,
author="Almeida, Jos{\'e} Bacelar
and Frade, Maria Jo{\~a}o
and Pinto, Jorge Sousa
and Melo de Sousa, Sim{\~a}o",
title="First-Order Logic",
bookTitle="Rigorous Software Development: An Introduction to Program Verification",
year="2011",
publisher="Springer London",
address="London",
pages="81--128",
abstract="First-order logic augments the expressive power of propositional logic as it links the logical assertions to properties of objects of some non-empty universe: the domain of discourse. This is achieved by allowing the propositional symbols to take arguments that range over elements of the domain of discourse. These are now called predicate symbols and are interpreted as relations on the domain. Elements of the domain of discourse are denoted by terms built up from variables, constants, and functions applied to other terms. First-order logic also expands the lexicon of propositional logic with the quantifiers ``for all'' and ``there exists'' that are interpreted consistently with their natural language meaning.",
isbn="978-0-85729-018-2",
doi="10.1007/978-0-85729-018-2_4",
url="https://doi.org/10.1007/978-0-85729-018-2_4"
}



@InProceedings{10.1007/978-3-642-14295-6_23,
author="Bozga, Marius
and Iosif, Radu
and Kone{\v{c}}n{\'y}, Filip",
editor="Touili, Tayssir
and Cook, Byron
and Jackson, Paul",
title="Fast Acceleration of Ultimately Periodic Relations",
booktitle="Computer Aided Verification",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="227--242",
abstract="Computing transitive closures of integer relations is the key to finding precise invariants of integer programs. In this paper, we describe an efficient algorithm for computing the transitive closures of difference bounds, octagonal and finite monoid affine relations. On the theoretical side, this framework provides a common solution to the acceleration problem, for all these three classes of relations. In practice, according to our experiments, the new method performs up to four orders of magnitude better than the previous ones, making it a promising approach for the verification of integer programs.",
isbn="978-3-642-14295-6"
}

@InProceedings{10.1007/11691372_33,
	author="Jhala, Ranjit
	and McMillan, K. L.",
	editor="Hermanns, Holger
	and Palsberg, Jens",
	title="A Practical and Complete Approach to Predicate Refinement",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="459--473",
	abstract="Predicate abstraction is a method of synthesizing the strongest inductive invariant of a system expressible as a Boolean combination of a given set of atomic predicates. A predicate selection method can be said to be complete for a given theory if it is guaranteed to eventually find atomic predicates sufficient to prove a given property, when such exist. Current heuristics are incomplete, and often diverge on simple examples. We present a practical method of predicate selection that is complete in the above sense. The method is based on interpolation and uses a ``split prover'', somewhat in the style of structure-based provers used in artificial intelligence. We show that it allows the verification of a variety of simple programs that cannot be verified by existing software model checkers.",
	isbn="978-3-540-33057-8"
}

@article{DBLP:journals/corr/GreitschusDP17,
  author    = {Marius Greitschus and
               Daniel Dietsch and
               Andreas Podelski},
  title     = {Refining Trace Abstraction using Abstract Interpretation},
  journal   = {CoRR},
  volume    = {abs/1702.02369},
  year      = {2017},
  url       = {http://arxiv.org/abs/1702.02369},
  archivePrefix = {arXiv},
  eprint    = {1702.02369},
  timestamp = {Mon, 13 Aug 2018 16:47:34 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/GreitschusDP17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-14295-6_23,
author="Bozga, Marius
and Iosif, Radu
and Kone{\v{c}}n{\'y}, Filip",
editor="Touili, Tayssir
and Cook, Byron
and Jackson, Paul",
title="Fast Acceleration of Ultimately Periodic Relations",
booktitle="Computer Aided Verification",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="227--242",
abstract="Computing transitive closures of integer relations is the key to finding precise invariants of integer programs. In this paper, we describe an efficient algorithm for computing the transitive closures of difference bounds, octagonal and finite monoid affine relations. On the theoretical side, this framework provides a common solution to the acceleration problem, for all these three classes of relations. In practice, according to our experiments, the new method performs up to four orders of magnitude better than the previous ones, making it a promising approach for the verification of integer programs.",
isbn="978-3-642-14295-6"
}

@inproceedings{DBLP:conf/issta/StrejcekT12,
  author    = {Jan Strejcek and
               Marek Trt{\'{\i}}k},
  editor    = {Mats Per Erik Heimdahl and
               Zhendong Su},
  title     = {Abstracting path conditions},
  booktitle = {International Symposium on Software Testing and Analysis, {ISSTA}
               2012, Minneapolis, MN, USA, July 15-20, 2012},
  pages     = {155--165},
  publisher = {{ACM}},
  year      = {2012},
  url       = {https://doi.org/10.1145/2338965.2336772},
  doi       = {10.1145/2338965.2336772},
  timestamp = {Thu, 02 Dec 2021 11:46:17 +0100},
  biburl    = {https://dblp.org/rec/conf/issta/StrejcekT12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/issta/StrejcekT12,
  author    = {Jan Strejcek and
               Marek Trt{\'{\i}}k},
  editor    = {Mats Per Erik Heimdahl and
               Zhendong Su},
  title     = {Abstracting path conditions},
  booktitle = {International Symposium on Software Testing and Analysis, {ISSTA}
               2012, Minneapolis, MN, USA, July 15-20, 2012},
  pages     = {155--165},
  publisher = {{ACM}},
  year      = {2012},
  url       = {https://doi.org/10.1145/2338965.2336772},
  doi       = {10.1145/2338965.2336772},
  timestamp = {Thu, 02 Dec 2021 11:46:17 +0100},
  biburl    = {https://dblp.org/rec/conf/issta/StrejcekT12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cav/KroeningLW13,
  author    = {Daniel Kroening and
               Matt Lewis and
               Georg Weissenbacher},
  editor    = {Natasha Sharygina and
               Helmut Veith},
  title     = {Under-Approximating Loops in {C} Programs for Fast Counterexample
               Detection},
  booktitle = {Computer Aided Verification - 25th International Conference, {CAV}
               2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {8044},
  pages     = {381--396},
  publisher = {Springer},
  year      = {2013},
  url       = {https://doi.org/10.1007/978-3-642-39799-8\_26},
  doi       = {10.1007/978-3-642-39799-8\_26},
  timestamp = {Fri, 27 Mar 2020 08:45:57 +0100},
  biburl    = {https://dblp.org/rec/conf/cav/KroeningLW13.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1145/1706299.1706353,
	author = {Heizmann, Matthias and Hoenicke, Jochen and Podelski, Andreas},
	title = {Nested Interpolants},
	year = {2010},
	isbn = {9781605584799},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1706299.1706353},
	doi = {10.1145/1706299.1706353},
	abstract = {In this paper, we explore the potential of the theory of nested words for partial correctness proofs of recursive programs. Our conceptual contribution is a simple framework that allows us to shine a new light on classical concepts such as Floyd/Hoare proofs and predicate abstraction in the context of recursive programs. Our technical contribution is an interpolant-based software model checking method for recursive programs. The method avoids the costly construction of the abstract transformer by constructing a nested word automaton from an inductive sequence of `nested interpolants' (i.e., interpolants for a nested word which represents an infeasible error trace).},
	booktitle = {Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
	pages = {471â€“482},
	numpages = {12},
	keywords = {interpolants, static analysis, floyd-hoare logic, abstraction refinement, software model checking, abstract interpretation, recursion, nested words},
	location = {Madrid, Spain},
	series = {POPL '10}
}

@inproceedings{DBLP:conf/popl/JeannetSS14,
  author    = {Bertrand Jeannet and
               Peter Schrammel and
               Sriram Sankaranarayanan},
  editor    = {Suresh Jagannathan and
               Peter Sewell},
  title     = {Abstract acceleration of general linear loops},
  booktitle = {The 41st Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of
               Programming Languages, {POPL} '14, San Diego, CA, USA, January 20-21,
               2014},
  pages     = {529--540},
  publisher = {{ACM}},
  year      = {2014},
  url       = {https://doi.org/10.1145/2535838.2535843},
  doi       = {10.1145/2535838.2535843},
  timestamp = {Thu, 24 Jun 2021 16:19:31 +0200},
  biburl    = {https://dblp.org/rec/conf/popl/JeannetSS14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{craig_1957, title={Three uses of the Herbrand-Gentzen theorem in relating model theory and proof theory}, volume={22}, DOI={10.2307/2963594}, number={3}, journal={Journal of Symbolic Logic}, publisher={Cambridge University Press}, author={Craig, William}, year={1957}, pages={269â€“285}}

@inproceedings{McMillan2003InterpolationAS,
  title={Interpolation and SAT-Based Model Checking},
  author={Kenneth L. McMillan},
  booktitle={CAV},
  year={2003}
}

@inproceedings{JillThesis,
  title={Precise Loop Acceleration of
		Ultimately Periodic Relations in
		Ultimate},
  author={Jill Enke},
  publisher={Bachelor's Thesis},
  year={2017}
}

@inproceedings{ClausThesis,
  title={An Octagon Abstract Domain for Ultimate},
  author={Claus SchÃ¤tzle},
  publisher={Bachelor's Thesis},
  year={2016}
}


@inproceedings{Dietsch2016AutomatedVO,
  title={Automated verification of system requirements and software specifications},
  author={Daniel Dietsch},
  year={2016}
}

@Misc{Zitat03,
	title        = {SmtInterpol},
	howpublished = {\url{https://ultimate.informatik.uni-freiburg.de/smtinterpol/}},
	note         = {Accessed: 2021-07-28},
}

@Misc{z3,
	title        = {z3 solver},
	howpublished = {\url{https://github.com/Z3Prover/z3/}},
	note         = {Accessed: 2021-07-28},
}

@Misc{Boogie,
	title        = {Intermediate verification language Boogie},
	howpublished = {\url{
https://www.microsoft.com/en-us/research/project/boogie-an-intermediate-verification-language/}},
	note         = {Accessed: 2022-07-28},
}



@Comment{jabref-meta: databaseType:bibtex;}

